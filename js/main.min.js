!function(t){"use strict";t=t&&t.hasOwnProperty("default")?t.default:t;const e="6e400001-b5a3-f393-e0a9-e50e24dcca9e";class i{constructor(){this.device=null,this.characteristic=null,riot.observable(this)}connect(){return new Promise((t,i)=>{this.device?this.device.gatt.connected?t():this.device.gatt.connect().then(t=>{return t.getPrimaryService(e)}).then(t=>{return t.getCharacteristic("6e400002-b5a3-f393-e0a9-e50e24dcca9e")}).then(t=>{this.characteristic=t}).then(()=>{t()}).catch(t=>i(t)):navigator.bluetooth.requestDevice({filters:[{services:[e]},{name:"DD-Booster"}]}).then(t=>{return this.device=t,this.device.addEventListener("gattserverdisconnected",this.onDisconnected.bind(this)),t.gatt.connect()}).then(t=>{return t.getPrimaryService(e)}).then(t=>{return t.getCharacteristic("6e400002-b5a3-f393-e0a9-e50e24dcca9e")}).then(t=>{this.characteristic=t}).then(()=>{t()}).catch(t=>{i(t)})})}disconnect(){this.device&&this.device.gatt.connected&&(this.device.gatt.disconnect(),this.device=null,this.characteristic=null)}send(t){return new Promise((e,i)=>{if(!this.device||!this.device.gatt.connected||!this.characteristic)return void i("Not connected");this.characteristic.writeValue(new Uint8Array(t)).then(()=>{e()}).catch(t=>{i(t)})})}onDisconnected(){this.characteristic=null,this.trigger("disconnect")}}t.tag2("app",'<div class="work"> <div class="container"> <color-tab ref="colortab" class="contentarea" color="#FFFFFF"></color-tab> <digit-tab ref="digittab" class="contentarea" digit="0"></digit-tab> </div> <div class="wrapper_msg invisible"> <div ref="message"></div> </div> </div> <div class="footer"> <div each="{buttons}" class="button {selected: activeTab === type}" onclick="{footerButtonClick}"> <div class="icon">{icon}</div> <div class="title">{title}</div> </div> </div> <connect-dialog show="{showConnect}" ref="connectdialog"></connect-dialog>',"app { height: 100%; width: 100%; display: -webkit-flex; -webkit-flex-direction: column; -webkit-flex-wrap: nowrap; display: flex; flex-direction: column; flex-wrap: nowrap; background-color: #2C2C2C; min-width: 320px; min-height: 460px; } .work { -webkit-flex: 1; flex: 1; position: relative; overflow: hidden; } .container { position: absolute; left: 0; top: 0; bottom: 0; width: 200%; display: flex; display: -webkit-flex; -webkit-transition: left 0.5s ease-in-out; transition: left 0.5s ease-in-out; } .contentarea { width: 100%; height: 100%; overflow-y: overlay; -ms-overflow-y: auto; -ms-overflow-style: -ms-autohiding-scrollbar; position: relative; -webkit-overflow-scrolling: touch; } .info { font-size: 16px; position: absolute; top: 50%; width: 100%; text-align: center; } .footer { border-top: 1px solid #919F9F; display: -webkit-flex; -webkit-justify-content: space-around; display: flex; justify-content: space-around; } .footer .button:active, .footer .button.selected { color: #FFFFFF; } .footer .button { width: 100%; text-align: center; position: relative; padding: 5px; } .footer .button .icon { font-size: 25px; margin-top: 8px; } .footer .button .title { font-size: 12px; margin-top: 8px; margin-bottom: 8px; } .wrapper_msg { position: absolute; bottom: 5px; width: 100%; display: -webkit-flex; display: flex; visibility: visible; opacity: 1; -webkit-transition: opacity 0.2s linear; transition: opacity 0.2s linear; justify-content: center; } .error { background-color: #D70000; color: #FFFFFF; } .status { background-color: #00A200; color: #FFFFFF; } .wrapper_msg>div { padding: 5px 10px; font-size: 12px; font-weight: bold; } .contentarea { display: flex; flex-direction: column; }","",function(t){function e(){a.connectionTimer&&(clearTimeout(a.connectionTimer),a.connectionTimer=null)}function o(){e(),n()}function n(){a.connectionTimer=setTimeout(()=>{e(),a.showConnect=!0,a.update(),s.send([161,0,0,0,165,178]).then(()=>{s.disconnect()}).catch(t=>{a.sending=!1,r(t,"error")})},1e4)}function r(t,e){a.refs.message.className=e,a.refs.message.textContent=t,a.refs.message.parentElement.classList.remove("invisible"),a.timer&&clearTimeout(a.timer),a.timer=setTimeout(function(){a.refs.message.parentElement.classList.add("invisible"),a.timer=null},5e3)}function c(){var t=[161,0,0,0,165],e=[161,a.currentColor.r,a.currentColor.g,a.currentColor.b],i=[164,l[a.currentDigit]],n=[178];a.sending||(o(),a.sending=!0,s.send(t.concat(e,i,n)).then(()=>{a.sending=!1}).catch(t=>{a.sending=!1,r(t,"error")}))}var a=this,l=[5,0,6,1,7,2,8,3,9,4],s=new i;a.showConnect=!0,a.currentColor={r:255,g:255,b:255},a.currentDigit=0,a.buttons=[{title:"Color",icon:"b",type:"color"},{title:"Digit",icon:"n",type:"digit"}],a.activeTab="color",s.on("disconnect",()=>{e(),a.showConnect=!0,a.update()}),a.on("mount",()=>{a.refs.colortab.on("color",t=>{a.currentColor=t,c()}),a.refs.digittab.on("digit",t=>{a.currentDigit=t,c()}),a.refs.connectdialog.on("connect",()=>{s.connect().then(()=>{n(),a.showConnect=!1,a.update(),r("connected","status"),s.send([177,10,24]).catch(t=>{a.sending=!1,r(t,"error")})}).catch(t=>r(t,"error"))})}),a.footerButtonClick=(t=>{a.update({activeTab:t.item.type});var e,i;e=a.refs[t.item.type+"tab"].root,i=e.offsetLeft/e.clientWidth,e.parentElement.style.left=100*-i+"%"})}),t.tag2("color-tab",'<colorwheel ref="colorwheel" color="{color}"></colorwheel> <slider ref="slider" min="0" max="1" step="0.02" value="{brightness}"></slider> <div id="buttonctrl"> </div>',"#buttonctrl { display: -webkit-flex; -webkit-justify-content: space-between; -webkit-align-items: flex-end; display: flex; justify-content: space-between; align-items: flex-end; margin: 10px auto 35px auto; } #buttonctrl>.icon { font-size: 27px; line-height: 100%; padding: 0 20px; } #buttonctrl>.icon:active { color: #FFFFFF; } color-tab slider { width: 70%; margin: 10px auto; height: 20px; align-self: center; } color-tab slider .track { width: 100%; height: 100%; background-image: linear-gradient(to right, #000000 0%, #FFFFFF 100%); } color-tab slider .thumb { background: transparent; border: 3px solid rgba(255, 255, 255, 1.0); width: 14px; border-radius: 4px; height: 28px; position: absolute; top: -4px; margin-left: -7px; }","",function(t){function e(){var t=o.color.toRgb();return t.r=Math.round(t.r*o.brightness),t.g=Math.round(t.g*o.brightness),t.b=Math.round(t.b*o.brightness),t}function i(){var t=e();o.trigger("color",t)}var o=this;o.color=new tinycolor(t.color||{r:255,g:255,b:255}),o.brightness=.3,o.on("mount",function(){o.refs.slider.on("value",function(t){o.brightness=t,o.update(),i()}),o.refs.colorwheel.on("color",function(t){o.color=new tinycolor(t),o.update(),i()}),o.update()})}),t.tag2("digit-tab",'<div class="digit"> <div class="digit_wrapper"> <div class="digit_inline" if="{selectedValue !== undefined}"> <div>{selectedValue}</div> </div> </div> </div> <slider ref="slider" min="0" max="9" step="1" value="0"></slider>','.digit { position: relative; width: 100%; text-align: center; flex: 1; } .digit_wrapper { height: 100%; } .digit_inline { color: #ffffff; opacity: 0.5; font-size: 57vh; font-family: "Century Gothic", CenturyGothic, Geneva, AppleGothic, sans-serif; display: flex; height: 100%; } .digit_inline div { border: solid; border-radius: 15px; margin: auto; font-family: inherit; padding: 0 40px; } digit-tab slider { align-self: center; width: 70%; margin-top: 20px; margin-bottom: 65px; } digit-tab slider .thumb { border-radius: 20px; height: 40px; width: 40px; top: -18px; margin-left: -20px; }',"",function(t){function e(){i.trigger("digit",i.selectedValue)}var i=this;i.selectedValue=t.digit,i.on("mount",function(){i.refs.slider.on("value",function(t){i.selectedValue=t,i.update(),e()})})}),t.tag2("colorwheel",'<img id="colorwheel" ref="colorwheel" src="res/colorwheel.png" width="auto" height="90%" onload="{imageLoaded}"> <div id="pointer" ref="pointer" riot-style="left: {pointerLeft}px; top: {pointerTop}px; background-color: {pointerColor};"></div> <div class="touchrect"></div>',"colorwheel { position: relative; -webkit-flex: 1; flex: 1; } #colorwheel { position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto; } #pointer { width: 30px; height: 30px; position: absolute; border: 2px solid #FFFFFF; border-radius: 15px; left: calc(50% - 15px); top: calc(50% - 15px); }","",function(t){function e(t){var e,i,o,n={};return e=t.h*(Math.PI/180),o=Math.sin(e)*s.cpradius*t.s,i=Math.cos(e)*s.cpradius*t.s,n.x=Math.round(i+s.refs.colorwheel.offsetLeft+s.cpradius),n.y=Math.round(s.cpradius-o+s.refs.colorwheel.offsetTop),n}function i(t){var e,i,o,n,r;return n=t.x-s.refs.colorwheel.offsetLeft-s.cpradius,r=s.cpradius-t.y+s.refs.colorwheel.offsetTop,i=Math.atan2(r,n),e=(i*(180/Math.PI)+360)%360,o=Math.min(Math.sqrt(n*n+r*r)/s.cpradius,1),new tinycolor({h:e,s:o,v:1})}function o(t,e){var i,o={x:t,y:e},n={x:s.refs.colorwheel.offsetLeft+s.cpradius,y:s.refs.colorwheel.offsetTop+s.cpradius};return i=Math.sqrt(Math.pow(t-n.x,2)+Math.pow(e-n.y,2)),i>s.cpradius&&(o.x=n.x+s.cpradius*((t-n.x)/i),o.y=n.y+s.cpradius*((e-n.y)/i)),o}function n(){var t=e(s.color.toHsv());s.pointerLeft=t.x-s.refs.pointer.offsetWidth/2,s.pointerTop=t.y-s.refs.pointer.offsetHeight/2,s.pointerColor=s.color.toHexString()}function r(t){var e,n,r;t.touches?(n=t.touches[0].clientX,r=t.touches[0].clientY):(n=t.clientX,r=t.clientY),e=o(n,r),s.color=i(e),s.update(),c()}function c(){s.trigger("color",s.color.toRgb())}function a(t){s.cpradius=t.target.offsetWidth/2,s.cpcenter=t.target.offsetLeft+s.cpradius,s.update()}function l(){var t,e,i,o=s.root.clientWidth,n=s.root.clientHeight;t=s.refs.colorwheel.getAttribute("width"),e=s.refs.colorwheel.getAttribute("height"),i="auto"===t?e:t,o>n?e!==i&&(s.refs.colorwheel.setAttribute("height",i),s.refs.colorwheel.setAttribute("width","auto")):t!==i&&(s.refs.colorwheel.setAttribute("height","auto"),s.refs.colorwheel.setAttribute("width",i)),s.cpradius=s.refs.colorwheel.offsetWidth/2,s.cpcenter=s.refs.colorwheel.offsetLeft+s.cpradius,s.update()}var s=this;s.color=new tinycolor(t.color),s.setColor=function(t){s.color=new tinycolor(t),s.isMounted&&s.update()},s.on("update",function(){n()}),s.on("mount",function(){var t=s.root.querySelector(".touchrect");window.addPointerDownHandler(t,function(t){s.drag=!0,r(t)}),window.addPointerMoveHandler(t,function(t){s.drag&&(r(t),t.preventDefault())}),window.addPointerUpHandler(t,function(){s.drag=!1}),l()}),s.imageLoaded=a,window.addEventListener("resize",l)}),t.tag2("slider",'<div class="track"></div> <div class="thumb" riot-style="left: {((value - min) * 100 / (max - min))}%"></div>',"slider { position: relative; margin-left: 20px; margin-right: 20px; } .thumb { box-sizing: border-box; border-radius: 10px; height: 20px; width: 20px; border: 2px solid #BDC3C7; background-color: #FFFFFF; position: absolute; top: -8px; margin-left: -10px; } .track { border-radius: 4px; height: 4px; border: 1px solid #BDC3C7; background-color: #FFFFFF; }","",function(t){function e(t){var e,i,o,r,c;e=t.touches?t.touches[0].clientX:t.clientX,i=e-n.root.getBoundingClientRect().left,o=i/n.root.offsetWidth,r=(n.max-n.min)*o,c=(r-n.min)%n.step,c<=n.step/2?r-=c:r+=n.step-c,r=Math.max(r,n.min),r=Math.min(r,n.max),n.value=r,n.update(),n.trigger("value",r)}function i(t){n.drag&&(e(t),t.preventDefault())}function o(){n.drag=!1,n.update(),window.removePointerMoveHandler(document,i),window.removePointerUpHandler(document,o)}var n=this;n.min=t.min||0,n.max=t.max||100,n.value=t.value||0,n.step=t.step||1,n.setValue=function(t){n.value=t||0,n.update()},window.addPointerDownHandler(n.root,function(t){n.drag=!0,e(t,this),window.addPointerMoveHandler(document,i),window.addPointerUpHandler(document,o)})}),t.tag2("footer-button",'<div each="{buttons}" class="button {selected: activeTab === type}" onclick="{footerButtonClick}"> <div class="icon">{this.root.innerHTML = icon}</div> <div class="title">{title}</div> </div> <div class="button {selected: this.selected === true}"> </div>',"","",function(t){var e=this;e.icon=t.icon,e.title=t.title,e.selected=t.selected}),t.tag2("connect-dialog",'<div class="content"> <p>Press the button to scan for DD-Booster and connect to it</p> <button onclick="{onConnectButtonClick}">Scan & Connect</button> </div>',"connect-dialog { display: block; z-index: 10; position: fixed; left: 0; right: 0; top: 0; bottom: 0; background-color: rgba(255, 255, 255, 0.7); text-align: center; } connect-dialog:before { content: ''; display: inline-block; height: 100%; vertical-align: middle; } .content { display: inline-block; vertical-align: middle; background-color: gray; min-width: 200px; border-radius: 6px; padding: 20px; margin: 0 10px; } button { background-color: red; border: none; color: white; padding: 10px 20px; border-radius: 5px; font-size: 1em; outline: none; } button:active { background-color: darkred; } p { color: white; margin-top: 0; }","",function(t){var e=this;e.onConnectButtonClick=function(){e.trigger("connect")}}),riot.mount("*")}(riot);
